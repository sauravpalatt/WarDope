<%- include ("../partials/user/header") %>

<h3 class="m-5">Add New Address</h3>

<form id="addressForm" class="p-4 border rounded bg-light m-5">
    
    <div class="form-group">
        <label>Address Title</label>
        <div>
            <input type="radio" id="home" name="title" value="Home" required>
            <label class="mr-5" for="home">Home</label>
            <input type="radio" id="office" name="title" value="Office">
            <label for="office">Office</label>
        </div>
    </div>

    
    <div class="form-group">
        <label for="street">Street Address</label>
        <input type="text" id="street" name="street" class="form-control" placeholder="Street" required>
    </div>

    
    <div class="form-group">
        <label for="city">City</label>
        <input type="text" id="city" name="city" class="form-control" placeholder="City" required>
    </div>

    
    <div class="form-group">
        <label for="state">State</label>
        <input type="text" id="state" name="state" class="form-control" placeholder="State" required>
    </div>

    <div class="form-group">
        <label for="Pincode">Pincode</label>
        <input type="text" id="pinCode" name="pinCode" class="form-control" placeholder="Pincode" required>
    </div>

    
    <div class="form-group">
        <label for="country">Country</label>
        <input type="text" id="country" name="country" class="form-control" placeholder="Country" required>
    </div>

    
    <button type="button" id="submitButton" class="btn btn-primary btn-small">Add Address</button>
</form>

<%- include ("../partials/user/footer") %>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("addressForm");
        const fields = {
            title: document.querySelectorAll('input[name="title"]'),
            street: document.getElementById("street"),
            city: document.getElementById("city"),
            state: document.getElementById("state"),
            pinCode: document.getElementById("pinCode"),
            country: document.getElementById("country"),
        };

        const errorMessages = {
            street: "Street should contain only letters and spaces.",
            city: "City should contain only letters and spaces.",
            state: "State should contain only letters and spaces.",
            country: "Country should contain only letters and spaces.",
            pinCode: "Pincode must be a 6-digit number.",
            title: "Please select an address title (Home/Office)."
        };

        const regexPatterns = {
            text: /^[A-Za-z\s]+$/, // Only letters and spaces
            pinCode: /^\d{6}$/ // Only 6-digit numbers
        };

        function showError(input, message) {
            let errorElement = input.nextElementSibling;
            if (!errorElement || !errorElement.classList.contains("error-message")) {
                errorElement = document.createElement("small");
                errorElement.classList.add("error-message", "text-danger");
                input.parentNode.appendChild(errorElement);
            }
            errorElement.textContent = message;
        }

        function clearError(input) {
            let errorElement = input.nextElementSibling;
            if (errorElement && errorElement.classList.contains("error-message")) {
                errorElement.textContent = "";
            }
        }

        function validateInput(input, type) {
            const value = input.value.trim();
            if (value === "") {
                showError(input, `${input.previousElementSibling.textContent} cannot be empty.`);
                return false;
            }
            if (type && !regexPatterns[type].test(value)) {
                showError(input, errorMessages[input.id]);
                return false;
            }
            clearError(input);
            return true;
        }

        fields.street.addEventListener("input", () => validateInput(fields.street, "text"));
        fields.city.addEventListener("input", () => validateInput(fields.city, "text"));
        fields.state.addEventListener("input", () => validateInput(fields.state, "text"));
        fields.country.addEventListener("input", () => validateInput(fields.country, "text"));
        fields.pinCode.addEventListener("input", () => validateInput(fields.pinCode, "pinCode"));

        document.getElementById("submitButton").addEventListener("click", async (e) => {
            e.preventDefault();

            let isValid = true;
            let titleChecked = [...fields.title].some(radio => radio.checked);

            if (!titleChecked) {
                Swal.fire({ title: "Validation Error", text: errorMessages.title, icon: "warning" });
                isValid = false;
            }

            isValid = validateInput(fields.street, "text") && isValid;
            isValid = validateInput(fields.city, "text") && isValid;
            isValid = validateInput(fields.state, "text") && isValid;
            isValid = validateInput(fields.country, "text") && isValid;
            isValid = validateInput(fields.pinCode, "pinCode") && isValid;

            if (!isValid) return;

            const addressData = {
                title: titleChecked ? document.querySelector('input[name="title"]:checked').value : "",
                street: fields.street.value.trim(),
                city: fields.city.value.trim(),
                state: fields.state.value.trim(),
                pinCode: fields.pinCode.value.trim(),
                country: fields.country.value.trim(),
            };

            try {
                const response = await fetch("/addAddress", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(addressData)
                });

                const result = await response.json();
                if (response.ok) {
                    Swal.fire({ toast: true, position: 'top-end', icon: 'success', title: 'Address added successfully!', timer: 2000 });
                    setTimeout(() => window.location.href = "/address", 3000);
                    form.reset();
                } else {
                    Swal.fire({ toast: true, position: 'top-end', icon: 'error', title: result.message || "Error adding address", timer: 2000 });
                }
            } catch (error) {
                Swal.fire({ toast: true, position: 'top-end', icon: 'error', title: "Failed to add address. Please try again.", timer: 2000 });
            }
        });
    });
</script>