<%- include("../partials/user/header") %>

<div class="container mt-5">
    <h2 class="text-center mb-4">Order Details</h2>

    <!-- Order Summary Section -->
    <div class="card mb-4">
        <div class="card-body">
            <h4 class="card-title">Order Summary</h4>
            <p><strong>Order ID:</strong> <%= order.orderId %></p>
            <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
            <p><strong>Status:</strong> <span class="badge rounded-pill bg-info text-dark"><%= order.status %></span></p>
            <p><strong>Total Price:</strong> ₹<%= order.totalPrice %></p>
        </div>
    </div>

    <!-- Shipping Address Section -->
    <div class="card mb-4">
        <div class="card-body">
            <h4 class="card-title">Shipping Address</h4>
                    <p>
                        <strong>Name:</strong> <%= address.title %><br>
                        <strong>Address:</strong> <%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.pinCode %>
                    </p>
        </div>
    </div>

    <!-- Cart Items Section -->
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Items Ordered</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Size</th>
                        <th>Price</th>
                        <th>Subtotal</th>
                        <th style="display: none;">Product Id</th>
                    </tr>
                </thead>
                <tbody>
                    <% order.cartItems.forEach(item => { %>
                        <tr>
                            <td><%= item.productName %></td>
                            <td><%= item.quantity %></td>
                            <td><%= item.size %></td>
                            <td>₹<%= item.price %></td>
                            <td>₹<%= item.quantity * item.price %></td>
                            <td class="productId" style="display: none;"><%= item.productId %></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Cancel Order Button -->

    <% if(order.status === 'pending') { %>
        <button id="cancelOrderBtn" class="btn btn-danger mt-3">Cancel Order</button>
    <%  } %>

    <!-- Request Return Button -->

    <% if(order.status === 'delivered') { %>
        <button id="requestReturnBtn"class="btn btn-warning mt-3">Request Return</button>
     <% } %>   
  
</div>

<div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelModalLabel">Cancel Order</h5>
            </div>
            <div class="modal-body">
                <form id="cancelOrderForm">
                    <div class="mb-3">
                        <label for="cancelReason" class="form-label">Reason for Cancellation</label>
                        <textarea class="form-control" id="cancelReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="confirmCancelBtn" class="btn btn-danger">Submit</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const cancelOrderBtn = document.getElementById("cancelOrderBtn");
    const confirmCancelBtn = document.getElementById("confirmCancelBtn");
    const cancelReasonInput = document.getElementById("cancelReason");
    const cancelModal = document.getElementById("cancelModal"); // Assuming you have a modal for the reason input
    const orderItems = [];
    const orderId = "<%= order.orderId %>";
    
    cancelOrderBtn.addEventListener("click", async (e) => {
    e.preventDefault();

    const rows = document.querySelectorAll("table tbody tr");

    rows.forEach((row) => {
        const productName = row.querySelector("td:nth-child(1)").innerText;
        const quantity = row.querySelector("td:nth-child(2)").innerText;
        const size = row.querySelector("td:nth-child(3)").innerText;
        const productId = row.querySelector(".productId").innerText;

        orderItems.push({ productId, quantity, size });
    });

    const result = await Swal.fire({
        title: "Are you sure?",
        text: "Do you really want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, cancel it!",
        cancelButtonText: "No, keep it"
    });

    if (result.isConfirmed) {
        let cancelModalInstance = new bootstrap.Modal(cancelModal);
        cancelModalInstance.show();
    } else {
        Swal.fire({
            icon: "info",
            title: "Cancelled",
            text: "Order cancellation was aborted.",
            confirmButtonText: "OK"
        });
    }
    });

    confirmCancelBtn.addEventListener("click", async () => {
    const cancelReason = cancelReasonInput.value.trim();
    if (!cancelReason) {
        return Swal.fire({
            icon: "no icon",
            title: "Missing Reason",
            text: "Please provide a reason for cancellation.",
            confirmButtonText: "OK",
        });
    }

    try {
        const response = await fetch(`/order/cancel/${orderId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ reason: cancelReason, orderItems: orderItems }),
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: "success",
                text: data.message || "Order cancelled successfully",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 1000,
            });
            setTimeout(() => window.location.reload(), 1000);
        } else {
            Swal.fire({
                icon: "error",
                title: "Failed",
                text: data.message || "Unable to cancel the order.",
                confirmButtonText: "Try Again",
            });
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while cancelling the order. Please try again.",
            confirmButtonText: "Close",
        });
    }
 });
</script>

<script>

document.getElementById("requestReturnBtn").addEventListener("click", async () => {

    const orderId = "<%= order.orderId %>";

    const confirmation = await Swal.fire({
        title: "Request Product Return?",
        text: "Do you want to request a return for this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, request return!",
        cancelButtonText: "No, cancel",
    });

    if (!confirmation.isConfirmed) {
        await Swal.fire({
            icon: "info",
            title: "Cancelled",
            text: "Return request was aborted.",
            confirmButtonText: "OK",
        });
        return;
    }

    try {
        const response = await fetch(`/order/return/${orderId}`, {
            method: "POST", 
            headers: {
                "Content-Type": "application/json",
            },
        });

        const data = await response.json();

        if (response.ok) {
            await Swal.fire({
                icon: "success",
                text: data.message || "Return request submitted successfully",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 1000,
                timerProgressBar: false,
            });
            setTimeout(() => window.location.href="/", 1000);
        } else {
            await Swal.fire({
                icon: "error",
                title: "Oops...",
                text: data.message || "Failed to request return.",
                confirmButtonText: "Try Again",
            });
        }
    } catch (error) {
        console.error("Error in requesting return:", error);
        await Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while requesting the return. Please try again.",
            confirmButtonText: "Close",
        });
    }
});

</script>

<%- include("../partials/user/footer") %>