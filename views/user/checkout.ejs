<%- include ("../partials/user/header") %>

<h3 class="m-5 text-left">Add New Address</h3>

<div class="container">
    <div class="row justify-content-between">
        <!-- Address Form -->
        <div class="col-lg-7">
            <form id="addressForm" class="p-4 border rounded bg-light">
                <div class="form-group">
                    <label>Address Title</label>
                    <div>
                        <input type="radio" id="home" name="title" value="Home" required>
                        <label class="mr-5" for="home">Home</label>
                        <input type="radio" id="office" name="title" value="Office">
                        <label for="office">Office</label>
                    </div>
                </div>
                <div class="form-group">
                    <label for="street">Street Address</label>
                    <input type="text" id="street" name="street" class="form-control" placeholder="Street" required>
                </div>
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" class="form-control" placeholder="City" required>
                </div>
                <div class="form-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state" class="form-control" placeholder="State" required>
                </div>
                <div class="form-group">
                    <label for="Pincode">Pincode</label>
                    <input type="text" id="pinCode" name="pinCode" class="form-control" placeholder="Pincode" required>
                </div>
                <div class="form-group">
                    <label for="country">Country</label>
                    <input type="text" id="country" name="country" class="form-control" placeholder="Country" required>
                </div>
                <button type="button" id="submitButton" class="btn btn-primary btn-small">Add New Address</button>
            </form>
        </div>

        <div class="col-lg-5 mt-0">
            <div class="card border-secondary mb-4">

                <div class="card-body">
                    <h5 class="card-header bg-secondary font-weight-semi-bold border-0">Available Coupons</h5>
                    <select id="couponSelect" class="form-control">
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach((coupon) => { %>
                                <option value="<%= coupon.discountValue %>"><%= coupon.code %></option>
                            <% }) %>
                        <% } else { %>
                            <option>No coupons available</option>
                        <% } %>
                    </select>
                    <div class="mt-3">
                        <button id="applyCouponBtn" class="btn btn-primary btn-sm">Apply Coupon</button>
                    </div>
                </div>
                
                <div class="card-header bg-secondary border-0">
                    <h4 class="font-weight-semi-bold m-0">Order Total</h4>
                </div>
                <div class="card-body">
                    <table class="table table-bordered text-center"> 
                        <thead>
                            <tr>
                                <th scope="col">Product Name</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Size</th>
                                <th scope="col">Price</th>
                                <th scope="col" style="display: none;">Product Id</th>
                            </tr>
                        </thead>
                        <tbody class="cartItemsElements">
                            <% if (cartItems && cartItems.length > 0) { %>
                                <% cartItems.forEach((item) => { %>
                                    <tr>
                                        <td name="itemName"><%= item.product.productName %></td>
                                        <td name="itemQty"><strong><%= item.quantity %></strong></td>
                                        <td name="itemSize"><strong><%= item.size %></strong></td>
                                        <td name="itemPrice">₹<%= item.product.regularPrice %></td>
                                        <td name="itemPrdId" style="display: none;"><%= item.product._id %></td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="3" class="text-center">No items in the cart</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                    <hr class="mt-0">
                </div>
                <div class="card-footer border-secondary bg-transparent">
                    <div class="d-flex justify-content-between mt-2">
                        <p><strong>Price</strong></p>
                        <p id="totalPrice">₹<%= totalPrice %>.00</p>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <p><strong>Discount</strong></p>
                        <p id="discount" style="color: #c50606;">- ₹0.00</p>
                    </div>
                
                    <div class="d-flex justify-content-between mt-2">
                        <h5 class="font-weight-bold">Total</h5>
                        <h5 class="font-weight-bold" id="dynamicTotalPrice">₹<%= totalPrice %>.00</h5>
                    </div>
                </div>
            </div>
        
            <div class="card border-secondary mb-4">
                <div class="card-header bg-secondary border-0">
                    <h4 class="font-weight-semi-bold m-0">Payment</h4>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="razorpay">
                            <label class="custom-control-label" for="razorpay">Razorpay</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="cashOnDelivery">
                            <label class="custom-control-label" for="cashOnDelivery">Cash On Delivery</label>
                        </div>
                    </div>
                    <div>
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="banktransfer">
                            <label class="custom-control-label" for="banktransfer">Wallet</label>
                        </div>
                    </div>
                </div>
                <div class="card-footer border-secondary bg-transparent">
                    <button type="button" class="btn btn-lg btn-block btn-primary font-weight-bold my-3 py-3" id="placeOrderIdBtn">Place Order</button>
                </div>
            </div>
        </div>
    </div>
</div>

<h3 class="m-5 text-left">Check Out Address</h3>

<div class="container ml-5">
    <div class="row justify-content-start">
        <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach((address, index) => { %>
                <div class="col-md-4 mb-4">
                    <div class="card border-light shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">
                                <input 
                                    type="radio" 
                                    name="primaryAddress" 
                                    value="<%= address._id %>" 
                                    id="address<%= index %>" 
                                    <%= index === 0 ? 'checked' : '' %> 
                                >
                                <label for="address<%= index %>"><strong><%= address.title %></strong></label>
                            </h5>
                            <p class="card-text">
                                <%= address.street %> <br>
                                <%= address.city %> <br> 
                                <%= address.state %><br> 
                                <%= address.pinCode %><br>
                                <%= address.country %>
                            </p>
                            <button class="btn btn-danger btn-sm" onclick="confirmDelete('<%= address._id %>')">Delete</button>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="col-12">
                <p class="m-5">No addresses found.</p>
            </div>
        <% } %>
    </div>
</div>

<style>
    .container {
        max-width: 85%; 
        margin-left: auto;
        margin-right: auto;
    }

    .custom-width {
        width: 100%;
        margin: auto;
    }

    .col-lg-7 {
        margin-bottom: 30px;
    }

    .col-lg-5 {
        margin-top: 30px; 
    }

    .mb-4 {
        margin-bottom: 2rem;
    }

    h3 {
        text-align: center; 
    }
</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

    let selectedAddressId = null;

    document.querySelectorAll('input[name="primaryAddress"]').forEach(radio => {
        radio.addEventListener('change', (event) => {
            
            selectedAddressId = event.target.value;

            console.log('Selected Address ID:', selectedAddressId);

            Swal.fire({
                toast: true,
                position: 'top-end',  
                icon: 'success',
                title: 'Primary address updated',
                showConfirmButton: false,
                timer: 1500,  
                timerProgressBar: true  
            });
        });
    });
</script>

<script>
    
    function confirmDelete(addressId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This address will be deleted permanently!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {

            fetch(`/deleteAddress/${addressId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    
                    Swal.fire(
                        'Deleted!',
                        'Your address has been deleted.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error!', 'Something went wrong. Please try again.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'There was an issue with the request.', 'error');
            });
        }
    });
}
</script>

<script>
    const submitButton = document.getElementById("submitButton");

    let addressData;

    submitButton.addEventListener("click", async (e) => {
        e.preventDefault();

        const title = document.querySelector('input[name="title"]:checked')?.value || ""; 
        const street = document.getElementById("street").value;
        const city = document.getElementById("city").value;
        const state = document.getElementById("state").value;
        const pinCode = document.getElementById("pinCode").value;
        const country = document.getElementById("country").value;

        if (!title) {
            Swal.fire({
                title: "Validation Error",
                text: "Please select an address title (Home/Office).",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }
        if (!street) {
            Swal.fire({
                title: "Validation Error",
                text: "Street address cannot be empty.",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }
        if (!city) {
            Swal.fire({
                title: "Validation Error",
                text: "City cannot be empty.",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }
        if (!state) {
            Swal.fire({
                title: "Validation Error",
                text: "State cannot be empty.",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }
        if (!pinCode || !/^\d{6}$/.test(pinCode)) {
            Swal.fire({
                title: "Validation Error",
                text: "Please enter a valid 6-digit pincode.",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }
        if (!country) {
            Swal.fire({
                title: "Validation Error",
                text: "Country cannot be empty.",
                icon: "warning",
                toast: true,
                position: "top-end",
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            return;
        }

         addressData = {
            title,
            street,
            city,
            state,
            pinCode,
            country
        };

        try {         
        const response = await fetch("/addBillingAddress", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(addressData)
        });

        const result = await response.json();
        if (response.ok) {
           
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Address added successfully!',
                showConfirmButton: false,
                timer: 3000
            })
            
            document.getElementById("addressForm").reset(); 
            
            setTimeout(()=>{
                location.reload()  
            },3000)

        } else {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message || "Error adding address",
                showConfirmButton: false,
                timer: 3000
            });
        }
    } catch (error) {
        console.error("Error:", error);

        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: "Failed to add address. Please try again.",
            showConfirmButton: false,
            timer: 3000
        });
    }
    });

</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    document.getElementById("placeOrderIdBtn").addEventListener("click", async function () {
        const cartItems = [];
        const cartItemsElements = document.querySelectorAll(".cartItemsElements tr");

        // Fetching cart items
        if (cartItemsElements.length > 0) {
            cartItemsElements.forEach(item => {
                const productNameElement = item.querySelector("[name='itemName']");
                const priceElement = item.querySelector("[name='itemPrice']");
                const quantityElement = item.querySelector("[name='itemQty']");
                const sizeElement = item.querySelector("[name='itemSize']");
                const productIdElement = item.querySelector("[name='itemPrdId']");

                const productName = productNameElement ? productNameElement.innerText : '';
                const size = sizeElement ? sizeElement.innerText : '';
                const price = priceElement ? Number(priceElement.innerText.replace('₹', '').trim()) : 0;
                const quantity = quantityElement ? Number(quantityElement.innerText.trim()) : 0;
                const productId = productIdElement ? productIdElement.innerText : '';

                cartItems.push({ productName, price, quantity, size, productId });
            });
        } else {
            Swal.fire("Error", "No cart items found!", "error");
            return;
        }

        // Fetching total price
        const totalPriceElement = document.getElementById('dynamicTotalPrice');
        let totalPrice = 0;
        if (totalPriceElement) {
            totalPrice = parseFloat(totalPriceElement.innerText.replace('₹', '').replace('.00', ''));
        } else {
            Swal.fire("Error", "Total price element not found!", "error");
            return;
        }

        // Fetching address ID
        const selectedAddressElement = document.querySelector('input[name="primaryAddress"]:checked');
        const addressId = selectedAddressElement ? selectedAddressElement.value : null;
        if (!addressId) {
            Swal.fire("Error", "Please select a delivery address!", "error");
            return;
        }

        // Fetching payment method
        let deliveryType = '';
        const paymentMethods = document.querySelectorAll('input[name="payment"]:checked');
        if (paymentMethods.length > 0) {
            deliveryType = paymentMethods[0].id; // Assuming single selection
        } else {
            Swal.fire("Error", "Please select a payment method!", "error");
            return;
        }

        const cartData = { cartItems, totalPrice, addressId, deliveryType };

        async function handleCheckout() {
            if (deliveryType === 'razorpay') {
                try {
                    const orderResponse = await fetch('/placeOrder', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(cartData),
                    });

                    if (!orderResponse.ok) {
                        throw new Error("Failed to create Razorpay order");
                    }

                    const { order, key } = await orderResponse.json();

                    const options = {
                        key,
                        amount: order.amount,
                        currency: order.currency,
                        order_id: order.id,
                        name: "WarDope",
                        description: "Thank you for shopping with us!",
                        handler: async function (response) {
                            const verifyResponse = await fetch('/verifyPayment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(response),
                            });

                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                Swal.fire("Success", "Payment verified successfully!", "success").then(() => {
                                    window.location.href = '/orders';
                                });
                            } else {
                                Swal.fire("Error", "Payment verification failed!", "error");
                            }
                        },
                        theme: { color: "#3399cc" },
                    };

                    const razorpayInstance = new Razorpay(options);
                    razorpayInstance.open();

                    razorpayInstance.on('payment.failed', function (response) {
                        Swal.fire("Error", `Payment failed: ${response.error.description}`, "error");
                    });
                } catch (error) {
                    console.error("Error during Razorpay payment process:", error);
                    Swal.fire("Error", "Payment initiation failed!", "error");
                }
            } else if (deliveryType === 'cashOnDelivery' || deliveryType === 'banktransfer') {
                try {
                    const response = await fetch('/placeOrder', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(cartData),
                    });

                    if (response.ok) {
                        Swal.fire("Success", "Order placed successfully!", "success").then(() => {
                            window.location.href = '/orders';
                        });
                    } else {
                        throw new Error("Failed to place order");
                    }
                } catch (error) {
                    console.error("Error placing order:", error);
                    Swal.fire("Error", error.message || "Something went wrong!", "error");
                }
            }
        }

        // Confirm checkout
        Swal.fire({
            title: 'Confirm Order',
            text: 'Do you want to place this order?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, place order!',
            cancelButtonText: 'Cancel',
        }).then((result) => {
            if (result.isConfirmed) {
                handleCheckout();
            }
        });
    });
</script>

<script>
    document.getElementById("applyCouponBtn").addEventListener("click", async (e) => {
        e.preventDefault();

        const couponSelectId = document.getElementById("couponSelect");
        const totalPriceId = document.getElementById("totalPrice");
        const discount = document.getElementById("discount");
        const dynamicTotalPrice = document.getElementById("dynamicTotalPrice");

        const totalPrice = parseFloat(totalPriceId.innerText.replace(/[^0-9.]/g, ''));
        const discountValue = parseFloat(couponSelectId.value);
        const couponCode = couponSelectId.options[couponSelectId.selectedIndex].text;

        try {
            const couponData = {
                totalPrice,
                discountValue,
                couponCode
            };

            const response = await fetch("/applyCoupon", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(couponData)
            });

            if (!response.ok) {
                const { message } = await response.json();
                Swal.fire({
                    icon: "warning",
                    title: "Coupon Error",
                    text: message || "Something went wrong while applying the coupon.",
                });
                return;
            }

            const { discountPrice, amountDeducted } = await response.json();

            discount.innerText = `- ₹${amountDeducted.toFixed(2)}`;
            dynamicTotalPrice.innerText = `₹${discountPrice.toFixed(2)}`;

            Swal.fire({
                icon: "success",
                title: "Coupon Applied!",
                text: `Your coupon "${couponCode}" was successfully applied.`,
            });

        } catch (error) {
            console.error("ERROR IN FETCHING COUPON IN FRONT END", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Failed to apply the coupon. Please try again later.",
            });
        }
    });
</script>




<%- include ("../partials/user/footer") %>